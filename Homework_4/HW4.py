'''
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета
заработной платы сотрудника. В расчете необходимо использовать формулу:
(выработка в часах * ставка в час) + премия. Для выполнения расчета для
конкретных значений необходимо запускать скрипт с параметрами.
'''
from sys import argv

name, time, salary, prize = argv

try:
    name = str(name)
    time = int(time)
    salary = int(salary)
    prize = int(prize)
    result = time * salary + prize
    print(f'Зараборотная плата сотрудника {name}: {result}')
except ValueError:
    print("Введите число")

'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
input_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [el for num, el in enumerate(input_list) if
            input_list[num-1] < input_list[num]]
print(f'Исходный список: {input_list}')
print(f'Отсортированный список: {new_list}')
'''
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Необходимо решить задание в одну строку.
'''
print(
    f'Числа от 20 до 240 кратные 20 и 21 - '
    f'{[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')
'''
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
'''
input_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
end_list = [el for el in input_list if input_list.count(el) < 2]
print(f'Итоговый массив: {end_list}')
'''
5. Реализовать формирование списка, используя функцию range() и возможности 
генератора. В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
'''
from functools import reduce


def multiplicate(el_1, el_2):
    return el_1 * el_2


print(f'Список четных чисел: {[el for el in range(99, 1001) if el % 2 == 0]}')
print(
    f'Результат: {reduce(multiplicate, [el for el in range(99, 1001) if el % 2 == 0])}')
'''
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении 
числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, 
при котором повторение элементов списка будет прекращено.
'''
from itertools import count

for el in count(int(input('Введите число:'))):
    print(el)

from itertools import cycle

input_list = ['223', 'repeat', False, None]
for el in cycle(input_list):
    print(el)
'''
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим 
очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить 
только первые n чисел, начиная с 1! и до n!.
'''
from math import factorial


def fact(n):
    for i in range(n):
        yield factorial(i)


n = 4
x = 0
for el in fact(n):
    if x < n:
        print(el)
        x += 1
    else:
        break
