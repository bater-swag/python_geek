'''
1. Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа. Элементы списка можно
не запрашивать у пользователя, а указать явно, в программе.
'''


def check_elem(elem):
    for elem in range(len(spisok)):
        print(type(spisok[elem]))


spisok = ["check_out", 345, ["1234", "retro"], 36.74, True, -33]
check_elem(spisok)
'''
2. Для списка реализовать обмен значений соседних элементов, т.е. 
Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
При нечетном количестве элементов последний сохранить на своем месте. 
Для заполнения списка элементов необходимо использовать функцию input().
'''
a = list(input('Введите массив: '))
index_a = 0
for i in range(int(len(a) / 2)):
    a[index_a], a[index_a + 1] = a[index_a + 1], a[index_a]
    index_a += 2
print(a)
'''
3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и через dict.
'''
month = int(input("Введите месяц по номеру "))
seasons_list = ['winter', 'spring', 'summer', 'autumn']
seasons_dict = {1: 'winter', 2: 'spring', 3: 'summer', 4: 'autumn'}
if month == 1 or month == 12 or month == 2:
    print(f"Месяц относится к сезону - {seasons_dict.get(1)}")
    print(f"Месяц относится к сезону - {seasons_list[0]}")
elif month == 3 or month == 4 or month == 5:
    print(f"Месяц относится к сезону - {seasons_dict.get(2)}")
    print(f"Месяц относится к сезону - {seasons_list[1]}")
elif month == 6 or month == 7 or month == 8:
    print(f"Месяц относится к сезону - {seasons_dict.get(3)}")
    print(f"Месяц относится к сезону - {seasons_list[2]}")
elif month == 9 or month == 10 or month == 11:
    print(f"Месяц относится к сезону - {seasons_dict.get(3)}")
    print(f"Месяц относится к сезону - {seasons_list[3]}")
else:
    print("Введите существующий месяц")
'''
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
Если в слово длинное, выводить только первые 10 букв в слове.
'''
string = (input("Введите строку из нескольких строк "))
col = 1
word = string.split(' ')
for i in range(len(word)):
    if len(word[i]) <= 10:
        print(f"{col} {word[i]}")
        col += 1
    else:
        print(f"{col} {word[i][0:10]}")
        col += 1
'''
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий 
набор натуральных чисел. У пользователя необходимо запрашивать новый элемент 
рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.
'''
my_list = [7, 5, 3, 3, 2]
print(f'Рейтинг:{my_list}')
number = int(input("Введите число "))
for el in range(len(my_list)):
    if my_list[el] == number:
        col = {i: my_list.count(i) for i in my_list}
        if my_list[el] in col:
            my_list.insert(el + col[my_list[el]], number)
        break
    elif my_list[0] < number:
        my_list.insert(0, number)
    elif my_list[-1] > number:
        my_list.append(number)
    elif (my_list[el] > number) and (my_list[el + 1] < number) and (
            my_list[el] - \
            my_list[el + 1]) > 1:
        my_list.insert(el + 1, number)
        break
print(f"Конечный список - {my_list}")
'''
6. * Реализовать структуру данных «Товары». Она должна представлять собой 
список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
В кортеже должно быть два элемента — номер товара и словарь с параметрами 
(характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные 
у пользователя.
Пример готовой структуры:
[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый 
ключ — характеристика товара, например название, а значение — список 
значений-характеристик, например список названий товаров.
Пример:
{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}
'''
count_items = int(input("Введите количество товаров "))
n = 1
all_dict = []
name = []
cost = []
col = []
ed = []
while n <= count_items:
    my_dict = dict({'название': input("Введите название: "),
                    'цена': input("Введите цену: "),
                    'количество': input('Введите количество: '),
                    'ед': str(input("Введите единицу измерения: "))})
    all_dict.append((n, my_dict))
    n += 1
for i in range(len(all_dict)):
    name.append(str(all_dict[i][1]['название']))
    cost.append(int(all_dict[i][1]['название']))
    col.append(int(all_dict[i][1]['название']))
    ed.append(str(all_dict[i][1]['название']))
    analys_data = dict(
        {'название': name,
         'цена': cost,
         'количество': col,
         'ед': ed})
print(all_dict)
print(analys_data)
